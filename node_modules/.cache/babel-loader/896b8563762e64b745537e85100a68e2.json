{"ast":null,"code":"import React from 'react';\nimport $ from 'jquery';\nexport var Draggable = React.createClass({\n  displayName: \"Draggable\",\n  getDefaultProps: function () {\n    return {\n      // allow the initial position to be passed in as a prop\n      initialPos: {\n        x: 0,\n        y: 0\n      }\n    };\n  },\n  getInitialState: function () {\n    return {\n      pos: this.props.initialPos,\n      dragging: false,\n      rel: null // position relative to the cursor\n\n    };\n  },\n  // we could get away with not having this (and just having the listeners on\n  // our div), but then the experience would be possibly be janky. If there's\n  // anything w/ a higher z-index that gets in the way, then you're toast,\n  // etc.\n  componentDidUpdate: function (props, state) {\n    if (this.state.dragging && !state.dragging) {\n      document.addEventListener('mousemove', this.onMouseMove);\n      document.addEventListener('mouseup', this.onMouseUp);\n    } else if (!this.state.dragging && state.dragging) {\n      document.removeEventListener('mousemove', this.onMouseMove);\n      document.removeEventListener('mouseup', this.onMouseUp);\n    }\n  },\n  // calculate relative position to the mouse and set dragging=true\n  onMouseDown: function (e) {\n    // only left mouse button\n    if (e.button !== 0) return;\n    var pos = $(this.getDOMNode()).offset();\n    this.setState({\n      dragging: true,\n      rel: {\n        x: e.pageX - pos.left,\n        y: e.pageY - pos.top\n      }\n    });\n    e.stopPropagation();\n    e.preventDefault();\n  },\n  onMouseUp: function (e) {\n    this.setState({\n      dragging: false\n    });\n    e.stopPropagation();\n    e.preventDefault();\n  },\n  onMouseMove: function (e) {\n    if (!this.state.dragging) return;\n    this.setState({\n      pos: {\n        x: e.pageX - this.state.rel.x,\n        y: e.pageY - this.state.rel.y\n      }\n    });\n    e.stopPropagation();\n    e.preventDefault();\n  },\n  render: function () {\n    // transferPropsTo will merge style & other props passed into our\n    // component to also be on the child DIV.\n    return this.transferPropsTo(React.DOM.div({\n      onMouseDown: this.onMouseDown,\n      style: {\n        left: this.state.pos.x + 'px',\n        top: this.state.pos.y + 'px'\n      }\n    }, this.props.children));\n  }\n});","map":{"version":3,"sources":["F:/FLOWY_2.0/my-flowy/src/components/draggable/Draggable.js"],"names":["React","$","Draggable","createClass","getDefaultProps","initialPos","x","y","getInitialState","pos","props","dragging","rel","componentDidUpdate","state","document","addEventListener","onMouseMove","onMouseUp","removeEventListener","onMouseDown","e","button","getDOMNode","offset","setState","pageX","left","pageY","top","stopPropagation","preventDefault","render","transferPropsTo","DOM","div","style","children"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport $ from 'jquery';\r\n\r\nexport var Draggable = React.createClass({\r\n    getDefaultProps: function () {\r\n      return {\r\n        // allow the initial position to be passed in as a prop\r\n        initialPos: {x: 0, y: 0}\r\n      }\r\n    },\r\n    getInitialState: function () {\r\n      return {\r\n        pos: this.props.initialPos,\r\n        dragging: false,\r\n        rel: null // position relative to the cursor\r\n      }\r\n    },\r\n    // we could get away with not having this (and just having the listeners on\r\n    // our div), but then the experience would be possibly be janky. If there's\r\n    // anything w/ a higher z-index that gets in the way, then you're toast,\r\n    // etc.\r\n    componentDidUpdate: function (props, state) {\r\n      if (this.state.dragging && !state.dragging) {\r\n        document.addEventListener('mousemove', this.onMouseMove)\r\n        document.addEventListener('mouseup', this.onMouseUp)\r\n      } else if (!this.state.dragging && state.dragging) {\r\n        document.removeEventListener('mousemove', this.onMouseMove)\r\n        document.removeEventListener('mouseup', this.onMouseUp)\r\n      }\r\n    },\r\n  \r\n    // calculate relative position to the mouse and set dragging=true\r\n    onMouseDown: function (e) {\r\n      // only left mouse button\r\n      if (e.button !== 0) return\r\n      var pos = $(this.getDOMNode()).offset()\r\n      this.setState({\r\n        dragging: true,\r\n        rel: {\r\n          x: e.pageX - pos.left,\r\n          y: e.pageY - pos.top\r\n        }\r\n      })\r\n      e.stopPropagation()\r\n      e.preventDefault()\r\n    },\r\n    onMouseUp: function (e) {\r\n      this.setState({dragging: false})\r\n      e.stopPropagation()\r\n      e.preventDefault()\r\n    },\r\n    onMouseMove: function (e) {\r\n      if (!this.state.dragging) return\r\n      this.setState({\r\n        pos: {\r\n          x: e.pageX - this.state.rel.x,\r\n          y: e.pageY - this.state.rel.y\r\n        }\r\n      })\r\n      e.stopPropagation()\r\n      e.preventDefault()\r\n    },\r\n    render: function () {\r\n      // transferPropsTo will merge style & other props passed into our\r\n      // component to also be on the child DIV.\r\n      return this.transferPropsTo(React.DOM.div({\r\n        onMouseDown: this.onMouseDown,\r\n        style: {\r\n          left: this.state.pos.x + 'px',\r\n          top: this.state.pos.y + 'px'\r\n        }\r\n      }, this.props.children))\r\n    }\r\n  })\r\n"]},"metadata":{},"sourceType":"module"}