{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"F:\\\\FLOWY_2.0\\\\empty prjt\\\\src\\\\components\\\\edge\\\\UpdatableEdge.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport ReactFlow, { Controls, updateEdge, addEdge } from 'react-flow-renderer';\nconst initialElements = [{\n  id: '1',\n  type: 'input',\n  data: {\n    label: 'Node A'\n  },\n  position: {\n    x: 250,\n    y: 0\n  }\n}, {\n  id: '2',\n  data: {\n    label: 'Node B'\n  },\n  position: {\n    x: 100,\n    y: 200\n  }\n}, {\n  id: '3',\n  data: {\n    label: 'Node C'\n  },\n  position: {\n    x: 400,\n    y: 200\n  }\n}, {\n  id: 'e1-2',\n  source: '1',\n  target: '2',\n  label: 'updatable edge'\n}];\n\nconst onLoad = reactFlowInstance => reactFlowInstance.fitView();\n\nconst UpdatableEdge = () => {\n  _s();\n\n  const [elements, setElements] = useState(initialElements); // gets called after end of edge gets dragged to another source or target\n\n  const onEdgeUpdate = (oldEdge, newConnection) => setElements(els => updateEdge(oldEdge, newConnection, els));\n\n  const onConnect = params => setElements(els => addEdge(params, els));\n\n  return /*#__PURE__*/_jsxDEV(ReactFlow, {\n    elements: elements,\n    onLoad: onLoad,\n    snapToGrid: true,\n    onEdgeUpdate: onEdgeUpdate,\n    onConnect: onConnect,\n    children: /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n};\n\n_s(UpdatableEdge, \"2AKLtE/cU4ESCqJy1IrkhE3P+V8=\");\n\n_c = UpdatableEdge;\nexport default UpdatableEdge;\n\nvar _c;\n\n$RefreshReg$(_c, \"UpdatableEdge\");","map":{"version":3,"sources":["F:/FLOWY_2.0/empty prjt/src/components/edge/UpdatableEdge.js"],"names":["React","useState","ReactFlow","Controls","updateEdge","addEdge","initialElements","id","type","data","label","position","x","y","source","target","onLoad","reactFlowInstance","fitView","UpdatableEdge","elements","setElements","onEdgeUpdate","oldEdge","newConnection","els","onConnect","params"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,SAAP,IAAoBC,QAApB,EAA8BC,UAA9B,EAA0CC,OAA1C,QAAyD,qBAAzD;AACA,MAAMC,eAAe,GAAG,CACtB;AACEC,EAAAA,EAAE,EAAE,GADN;AAEEC,EAAAA,IAAI,EAAE,OAFR;AAGEC,EAAAA,IAAI,EAAE;AAAEC,IAAAA,KAAK,EAAE;AAAT,GAHR;AAIEC,EAAAA,QAAQ,EAAE;AAAEC,IAAAA,CAAC,EAAE,GAAL;AAAUC,IAAAA,CAAC,EAAE;AAAb;AAJZ,CADsB,EAOtB;AACEN,EAAAA,EAAE,EAAE,GADN;AAEEE,EAAAA,IAAI,EAAE;AAAEC,IAAAA,KAAK,EAAE;AAAT,GAFR;AAGEC,EAAAA,QAAQ,EAAE;AAAEC,IAAAA,CAAC,EAAE,GAAL;AAAUC,IAAAA,CAAC,EAAE;AAAb;AAHZ,CAPsB,EAYtB;AACEN,EAAAA,EAAE,EAAE,GADN;AAEEE,EAAAA,IAAI,EAAE;AAAEC,IAAAA,KAAK,EAAE;AAAT,GAFR;AAGEC,EAAAA,QAAQ,EAAE;AAAEC,IAAAA,CAAC,EAAE,GAAL;AAAUC,IAAAA,CAAC,EAAE;AAAb;AAHZ,CAZsB,EAiBtB;AAAEN,EAAAA,EAAE,EAAE,MAAN;AAAcO,EAAAA,MAAM,EAAE,GAAtB;AAA2BC,EAAAA,MAAM,EAAE,GAAnC;AAAwCL,EAAAA,KAAK,EAAE;AAA/C,CAjBsB,CAAxB;;AAmBA,MAAMM,MAAM,GAAIC,iBAAD,IAAuBA,iBAAiB,CAACC,OAAlB,EAAtC;;AACA,MAAMC,aAAa,GAAG,MAAM;AAAA;;AAC1B,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BpB,QAAQ,CAACK,eAAD,CAAxC,CAD0B,CAE1B;;AACA,QAAMgB,YAAY,GAAG,CAACC,OAAD,EAAUC,aAAV,KACnBH,WAAW,CAAEI,GAAD,IAASrB,UAAU,CAACmB,OAAD,EAAUC,aAAV,EAAyBC,GAAzB,CAApB,CADb;;AAEA,QAAMC,SAAS,GAAIC,MAAD,IAAYN,WAAW,CAAEI,GAAD,IAASpB,OAAO,CAACsB,MAAD,EAASF,GAAT,CAAjB,CAAzC;;AACA,sBACE,QAAC,SAAD;AACE,IAAA,QAAQ,EAAEL,QADZ;AAEE,IAAA,MAAM,EAAEJ,MAFV;AAGE,IAAA,UAAU,MAHZ;AAIE,IAAA,YAAY,EAAEM,YAJhB;AAKE,IAAA,SAAS,EAAEI,SALb;AAAA,2BAOE,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAPF;AAAA;AAAA;AAAA;AAAA,UADF;AAWD,CAjBD;;GAAMP,a;;KAAAA,a;AAkBN,eAAeA,aAAf","sourcesContent":["import React, { useState } from 'react';\r\nimport ReactFlow, { Controls, updateEdge, addEdge } from 'react-flow-renderer';\r\nconst initialElements = [\r\n  {\r\n    id: '1',\r\n    type: 'input',\r\n    data: { label: 'Node A' },\r\n    position: { x: 250, y: 0 },\r\n  },\r\n  {\r\n    id: '2',\r\n    data: { label: 'Node B' },\r\n    position: { x: 100, y: 200 },\r\n  },\r\n  {\r\n    id: '3',\r\n    data: { label: 'Node C' },\r\n    position: { x: 400, y: 200 },\r\n  },\r\n  { id: 'e1-2', source: '1', target: '2', label: 'updatable edge' },\r\n];\r\nconst onLoad = (reactFlowInstance) => reactFlowInstance.fitView();\r\nconst UpdatableEdge = () => {\r\n  const [elements, setElements] = useState(initialElements);\r\n  // gets called after end of edge gets dragged to another source or target\r\n  const onEdgeUpdate = (oldEdge, newConnection) =>\r\n    setElements((els) => updateEdge(oldEdge, newConnection, els));\r\n  const onConnect = (params) => setElements((els) => addEdge(params, els));\r\n  return (\r\n    <ReactFlow\r\n      elements={elements}\r\n      onLoad={onLoad}\r\n      snapToGrid\r\n      onEdgeUpdate={onEdgeUpdate}\r\n      onConnect={onConnect}\r\n    >\r\n      <Controls />\r\n    </ReactFlow>\r\n  );\r\n};\r\nexport default UpdatableEdge;"]},"metadata":{},"sourceType":"module"}