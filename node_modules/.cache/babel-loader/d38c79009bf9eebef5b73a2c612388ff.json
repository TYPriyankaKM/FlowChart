{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"F:\\\\FLOWY_2.0\\\\empty prjt\\\\src\\\\components\\\\flowchart\\\\Nodecomponent.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport ReactFlow, { addEdge, Background, Controls, MiniMap } from 'react-flow-renderer'; // to fill initial elements  \n\nconst initialElements = [{\n  id: '1',\n  type: 'input',\n  data: {\n    label: 'Actions'\n  },\n  position: {\n    x: 0,\n    y: 0\n  }\n}, {\n  id: '2',\n  type: 'input',\n  data: {\n    label: 'Triggers'\n  },\n  position: {\n    x: 0,\n    y: 0\n  }\n}]; // to calculate the entire height & width of node\n\nconst onLoad = reactFlowInstance => {\n  reactFlowInstance.fitView();\n};\n\nconst MyFlow = () => {\n  _s();\n\n  // To Add a New Node \n  const [elements, setElements] = useState(initialElements);\n  const [name, setName] = useState(\"\");\n\n  const addNode = () => {\n    setElements(e => e.concat({\n      id: (e.length + 1).toString(),\n      data: {\n        label: `${name}`\n      },\n      position: {\n        x: Math.random() * window.innerWidth,\n        y: Math.random() * window.innerHeight\n      }\n    }));\n  }; // To connect between two nodes\n\n\n  const onConnect = params => setElements(e => addEdge(params, e));\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"RightTab col-md-12 bg-light\",\n      children: /*#__PURE__*/_jsxDEV(ReactFlow, {\n        elements: elements,\n        onLoad: onLoad,\n        style: {\n          width: '100%',\n          height: '90vh'\n        },\n        onConnect: onConnect,\n        connectionLineStyle: {\n          stroke: '#ddd',\n          strokeWidth: 2\n        },\n        connectionLineType: \"bezier\",\n        snapToGrid: true,\n        snapGrid: [16, 16],\n        children: [/*#__PURE__*/_jsxDEV(Background, {\n          color: \"#888\",\n          gap: 16\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(MiniMap, {\n          nodeColor: n => {\n            if (n.type == 'input') return 'blue';\n            return '#FFCC00';\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"title\",\n        onChange: e => setName(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: addNode,\n        children: \"Add Node\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(MyFlow, \"m1VSeBNMC6mnc/JQHwLwM3dmmeE=\");\n\n_c = MyFlow;\nexport default MyFlow;\n\nvar _c;\n\n$RefreshReg$(_c, \"MyFlow\");","map":{"version":3,"sources":["F:/FLOWY_2.0/empty prjt/src/components/flowchart/Nodecomponent.js"],"names":["React","useState","ReactFlow","addEdge","Background","Controls","MiniMap","initialElements","id","type","data","label","position","x","y","onLoad","reactFlowInstance","fitView","MyFlow","elements","setElements","name","setName","addNode","e","concat","length","toString","Math","random","window","innerWidth","innerHeight","onConnect","params","width","height","stroke","strokeWidth","n","target","value"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,SAAP,IAAoBC,OAApB,EAA6BC,UAA7B,EAAyCC,QAAzC,EAAmDC,OAAnD,QAAkE,qBAAlE,C,CAIA;;AACA,MAAMC,eAAe,GAAG,CACpB;AAAEC,EAAAA,EAAE,EAAE,GAAN;AAAWC,EAAAA,IAAI,EAAE,OAAjB;AAA0BC,EAAAA,IAAI,EAAE;AAAEC,IAAAA,KAAK,EAAE;AAAT,GAAhC;AAAsDC,EAAAA,QAAQ,EAAE;AAAEC,IAAAA,CAAC,EAAE,CAAL;AAAQC,IAAAA,CAAC,EAAE;AAAX;AAAhE,CADoB,EAEpB;AAAEN,EAAAA,EAAE,EAAE,GAAN;AAAWC,EAAAA,IAAI,EAAE,OAAjB;AAA0BC,EAAAA,IAAI,EAAE;AAAEC,IAAAA,KAAK,EAAE;AAAT,GAAhC;AAAuDC,EAAAA,QAAQ,EAAE;AAAEC,IAAAA,CAAC,EAAE,CAAL;AAAQC,IAAAA,CAAC,EAAE;AAAX;AAAjE,CAFoB,CAAxB,C,CAKA;;AACA,MAAMC,MAAM,GAAIC,iBAAD,IAAuB;AAClCA,EAAAA,iBAAiB,CAACC,OAAlB;AACH,CAFD;;AAMA,MAAMC,MAAM,GAAG,MAAM;AAAA;;AAEjB;AACA,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BnB,QAAQ,CAACM,eAAD,CAAxC;AACA,QAAM,CAACc,IAAD,EAAOC,OAAP,IAAkBrB,QAAQ,CAAC,EAAD,CAAhC;;AAEA,QAAMsB,OAAO,GAAG,MAAM;AAClBH,IAAAA,WAAW,CAACI,CAAC,IAAIA,CAAC,CAACC,MAAF,CAAS;AACtBjB,MAAAA,EAAE,EAAE,CAACgB,CAAC,CAACE,MAAF,GAAW,CAAZ,EAAeC,QAAf,EADkB;AAEtBjB,MAAAA,IAAI,EAAE;AAAEC,QAAAA,KAAK,EAAG,GAAEU,IAAK;AAAjB,OAFgB;AAGtBT,MAAAA,QAAQ,EAAE;AAAEC,QAAAA,CAAC,EAAEe,IAAI,CAACC,MAAL,KAAgBC,MAAM,CAACC,UAA5B;AAAwCjB,QAAAA,CAAC,EAAEc,IAAI,CAACC,MAAL,KAAgBC,MAAM,CAACE;AAAlE;AAHY,KAAT,CAAN,CAAX;AAKH,GAND,CANiB,CAgBjB;;;AACA,QAAMC,SAAS,GAAIC,MAAD,IAAYd,WAAW,CAACI,CAAC,IAAIrB,OAAO,CAAC+B,MAAD,EAASV,CAAT,CAAb,CAAzC;;AAEA,sBACI;AAAA,4BACA;AAAK,MAAA,SAAS,EAAC,6BAAf;AAAA,6BACI,QAAC,SAAD;AACI,QAAA,QAAQ,EAAEL,QADd;AAEI,QAAA,MAAM,EAAEJ,MAFZ;AAGI,QAAA,KAAK,EAAE;AAAEoB,UAAAA,KAAK,EAAE,MAAT;AAAiBC,UAAAA,MAAM,EAAE;AAAzB,SAHX;AAII,QAAA,SAAS,EAAEH,SAJf;AAKI,QAAA,mBAAmB,EAAE;AAAEI,UAAAA,MAAM,EAAE,MAAV;AAAkBC,UAAAA,WAAW,EAAE;AAA/B,SALzB;AAMI,QAAA,kBAAkB,EAAC,QANvB;AAOI,QAAA,UAAU,EAAE,IAPhB;AAQI,QAAA,QAAQ,EAAE,CAAC,EAAD,EAAK,EAAL,CARd;AAAA,gCAYI,QAAC,UAAD;AACI,UAAA,KAAK,EAAC,MADV;AAEI,UAAA,GAAG,EAAE;AAFT;AAAA;AAAA;AAAA;AAAA,gBAZJ,eAkBI,QAAC,OAAD;AACI,UAAA,SAAS,EAAEC,CAAC,IAAI;AACZ,gBAAIA,CAAC,CAAC9B,IAAF,IAAU,OAAd,EAAuB,OAAO,MAAP;AACvB,mBAAO,SAAP;AACH;AAJL;AAAA;AAAA;AAAA;AAAA,gBAlBJ,eAyBI,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA,gBAzBJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADA,eA+BI;AAAA,8BACI;AAAO,QAAA,IAAI,EAAC,MAAZ;AACI,QAAA,IAAI,EAAC,OADT;AAEI,QAAA,QAAQ,EAAEe,CAAC,IAAIF,OAAO,CAACE,CAAC,CAACgB,MAAF,CAASC,KAAV;AAF1B;AAAA;AAAA;AAAA;AAAA,cADJ,eAMI;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAsB,QAAA,OAAO,EAAElB,OAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cANJ;AAAA;AAAA;AAAA;AAAA;AAAA,YA/BJ;AAAA,kBADJ;AA2CH,CA9DD;;GAAML,M;;KAAAA,M;AAgEN,eAAeA,MAAf","sourcesContent":["import React, { useState } from 'react';\r\nimport ReactFlow, { addEdge, Background, Controls, MiniMap } from 'react-flow-renderer';\r\n\r\n\r\n\r\n// to fill initial elements  \r\nconst initialElements = [\r\n    { id: '1', type: 'input', data: { label: 'Actions' }, position: { x: 0, y: 0 } },\r\n    { id: '2', type: 'input', data: { label: 'Triggers' }, position: { x: 0, y: 0 } }\r\n]\r\n\r\n// to calculate the entire height & width of node\r\nconst onLoad = (reactFlowInstance) => {\r\n    reactFlowInstance.fitView();\r\n}\r\n\r\n\r\n\r\nconst MyFlow = () => {\r\n\r\n    // To Add a New Node \r\n    const [elements, setElements] = useState(initialElements);\r\n    const [name, setName] = useState(\"\");\r\n\r\n    const addNode = () => {\r\n        setElements(e => e.concat({\r\n            id: (e.length + 1).toString(),\r\n            data: { label: `${name}` },\r\n            position: { x: Math.random() * window.innerWidth, y: Math.random() * window.innerHeight }\r\n        }));\r\n    };\r\n\r\n\r\n\r\n    // To connect between two nodes\r\n    const onConnect = (params) => setElements(e => addEdge(params, e));\r\n\r\n    return (\r\n        <>\r\n        <div className=\"RightTab col-md-12 bg-light\">\r\n            <ReactFlow\r\n                elements={elements}\r\n                onLoad={onLoad}\r\n                style={{ width: '100%', height: '90vh' }}\r\n                onConnect={onConnect}\r\n                connectionLineStyle={{ stroke: '#ddd', strokeWidth: 2 }}\r\n                connectionLineType=\"bezier\"\r\n                snapToGrid={true}\r\n                snapGrid={[16, 16]}\r\n            >\r\n\r\n\r\n                <Background\r\n                    color=\"#888\"\r\n                    gap={16} />\r\n\r\n\r\n                {/*used to color distinguishing the object  */}\r\n                <MiniMap\r\n                    nodeColor={n => {\r\n                        if (n.type == 'input') return 'blue';\r\n                        return '#FFCC00'\r\n                    }} />\r\n\r\n\r\n                <Controls />\r\n            </ReactFlow>\r\n            </div>\r\n\r\n            <div>\r\n                <input type=\"text\"\r\n                    name=\"title\"\r\n                    onChange={e => setName(e.target.value)}\r\n                />\r\n\r\n                <button type=\"button\" onClick={addNode}>Add Node</button>\r\n            </div>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MyFlow;"]},"metadata":{},"sourceType":"module"}