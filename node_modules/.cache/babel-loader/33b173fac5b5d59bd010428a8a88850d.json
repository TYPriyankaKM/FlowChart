{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"F:\\\\FLOWY_2.0\\\\empty prjt\\\\src\\\\components\\\\flowchart\\\\Node.component.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport ReactFlow, { addEdge, Background, Controls, MiniMap } from 'react-flow-renderer'; // to fill initial elements  \n\nconst initialElements = [{\n  id: '1',\n  type: 'input',\n  data: {\n    label: 'Node'\n  },\n  position: {\n    x: 0,\n    y: 0\n  }\n}]; // to calculate the entire height & width of node\n\nconst onLoad = reactFlowInstance => {\n  reactFlowInstance.fitView();\n};\n\nconst MyFlow = () => {\n  _s();\n\n  // To Add a New Node \n  const [elements, setElements] = useState(initialElements);\n  const [name, setName] = useState(\"\");\n\n  const addNode = () => {\n    setElements(e => e.concat({\n      id: (e.length + 1).toString(),\n      data: {\n        label: `${name}`\n      },\n      position: {\n        x: Math.random() * window.innerWidth,\n        y: Math.random() * window.innerHeight\n      }\n    }));\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(ReactFlow, {\n      elements: initialElements,\n      onLoad: onLoad,\n      style: {\n        width: '100%',\n        height: '90vh'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Background, {\n        color: \"#888\",\n        gap: 16\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 1\n      }, this), /*#__PURE__*/_jsxDEV(MiniMap, {\n        nodeColor: n => {\n          if (n.type == 'input') return 'blue';\n          return '#FFCC00';\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 1\n      }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 1\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 8\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"title\",\n        onChange: e => setName(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: addNode(),\n        children: \"Add Node\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 1\n    }, this)]\n  }, void 0, true);\n};\n\n_s(MyFlow, \"m1VSeBNMC6mnc/JQHwLwM3dmmeE=\");\n\n_c = MyFlow;\nexport default MyFlow;\n\nvar _c;\n\n$RefreshReg$(_c, \"MyFlow\");","map":{"version":3,"sources":["F:/FLOWY_2.0/empty prjt/src/components/flowchart/Node.component.jsx"],"names":["React","useState","ReactFlow","addEdge","Background","Controls","MiniMap","initialElements","id","type","data","label","position","x","y","onLoad","reactFlowInstance","fitView","MyFlow","elements","setElements","name","setName","addNode","e","concat","length","toString","Math","random","window","innerWidth","innerHeight","width","height","n","target","value"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAcC,QAAd,QAA6B,OAA7B;AACA,OAAOC,SAAP,IAAkBC,OAAlB,EAA0BC,UAA1B,EAAqCC,QAArC,EAA8CC,OAA9C,QAA4D,qBAA5D,C,CAIA;;AACA,MAAMC,eAAe,GAAG,CACpB;AAACC,EAAAA,EAAE,EAAC,GAAJ;AAASC,EAAAA,IAAI,EAAC,OAAd;AAAuBC,EAAAA,IAAI,EAAC;AAACC,IAAAA,KAAK,EAAC;AAAP,GAA5B;AAA4CC,EAAAA,QAAQ,EAAE;AAACC,IAAAA,CAAC,EAAC,CAAH;AAAKC,IAAAA,CAAC,EAAC;AAAP;AAAtD,CADoB,CAAxB,C,CAIA;;AACA,MAAMC,MAAM,GAAIC,iBAAD,IAAuB;AAClCA,EAAAA,iBAAiB,CAACC,OAAlB;AACH,CAFD;;AAMA,MAAMC,MAAM,GAAG,MAAM;AAAA;;AAErB;AACA,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BnB,QAAQ,CAACM,eAAD,CAAxC;AACA,QAAM,CAACc,IAAD,EAAOC,OAAP,IAAkBrB,QAAQ,CAAC,EAAD,CAAhC;;AAEA,QAAMsB,OAAO,GAAG,MAAM;AAClBH,IAAAA,WAAW,CAACI,CAAC,IAAIA,CAAC,CAACC,MAAF,CAAS;AACtBjB,MAAAA,EAAE,EAAE,CAACgB,CAAC,CAACE,MAAF,GAAS,CAAV,EAAaC,QAAb,EADkB;AAEtBjB,MAAAA,IAAI,EAAC;AAACC,QAAAA,KAAK,EAAE,GAAEU,IAAK;AAAf,OAFiB;AAGtBT,MAAAA,QAAQ,EAAC;AAACC,QAAAA,CAAC,EAACe,IAAI,CAACC,MAAL,KAAgBC,MAAM,CAACC,UAA1B;AAAsCjB,QAAAA,CAAC,EAACc,IAAI,CAACC,MAAL,KAAgBC,MAAM,CAACE;AAA/D;AAHa,KAAT,CAAN,CAAX;AAKH,GAND;;AAQI,sBACI;AAAA,4BACD,QAAC,SAAD;AACA,MAAA,QAAQ,EAAEzB,eADV;AAEA,MAAA,MAAM,EAAEQ,MAFR;AAGA,MAAA,KAAK,EAAE;AAACkB,QAAAA,KAAK,EAAC,MAAP;AAAeC,QAAAA,MAAM,EAAC;AAAtB,OAHP;AAAA,8BAMP,QAAC,UAAD;AACA,QAAA,KAAK,EAAC,MADN;AAEA,QAAA,GAAG,EAAE;AAFL;AAAA;AAAA;AAAA;AAAA,cANO,eAYP,QAAC,OAAD;AACA,QAAA,SAAS,EAAEC,CAAC,IAAI;AACZ,cAAGA,CAAC,CAAC1B,IAAF,IAAU,OAAb,EAAsB,OAAO,MAAP;AACtB,iBAAO,SAAP;AACF;AAJF;AAAA;AAAA;AAAA;AAAA,cAZO,eAmBP,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA,cAnBO;AAAA;AAAA;AAAA;AAAA;AAAA,YADC,eAuBR;AAAA,8BACI;AAAO,QAAA,IAAI,EAAC,MAAZ;AACA,QAAA,IAAI,EAAC,OADL;AAEA,QAAA,QAAQ,EAAEe,CAAC,IAAIF,OAAO,CAACE,CAAC,CAACY,MAAF,CAASC,KAAV;AAFtB;AAAA;AAAA;AAAA;AAAA,cADJ,eAMI;AAAQ,QAAA,IAAI,EAAC,QAAb;AACA,QAAA,OAAO,EAAId,OAAO,EADlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cANJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAvBQ;AAAA,kBADJ;AAoCH,CAlDD;;GAAML,M;;KAAAA,M;AAoDN,eAAeA,MAAf","sourcesContent":["import React,{useState} from 'react'\r\nimport ReactFlow,{addEdge,Background,Controls,MiniMap} from 'react-flow-renderer';\r\n\r\n\r\n\r\n// to fill initial elements  \r\nconst initialElements = [\r\n    {id:'1', type:'input', data:{label:'Node'}, position: {x:0,y:0}}\r\n]\r\n\r\n// to calculate the entire height & width of node\r\nconst onLoad = (reactFlowInstance) => {\r\n    reactFlowInstance.fitView();\r\n}\r\n\r\n\r\n\r\nconst MyFlow = () => {\r\n\r\n// To Add a New Node \r\nconst [elements, setElements] = useState(initialElements);\r\nconst [name, setName] = useState(\"\");\r\n\r\nconst addNode = () => {\r\n    setElements(e => e.concat({\r\n        id: (e.length+1).toString(),\r\n        data:{label:`${name}`},\r\n        position:{x:Math.random() * window.innerWidth, y:Math.random() * window.innerHeight}\r\n    }));\r\n}\r\n\r\n    return (\r\n        <>\r\n       <ReactFlow\r\n       elements={initialElements}\r\n       onLoad={onLoad}\r\n       style={{width:'100%', height:'90vh'}}>\r\n\r\n\r\n<Background\r\ncolor=\"#888\"\r\ngap={16}/>\r\n\r\n\r\n{/*used to color distinguishing the object  */}\r\n<MiniMap\r\nnodeColor={n => {\r\n    if(n.type == 'input') return 'blue';\r\n    return '#FFCC00'\r\n }} />\r\n\r\n\r\n<Controls/>\r\n</ReactFlow>\r\n\r\n<div>\r\n    <input type=\"text\"\r\n    name=\"title\"\r\n    onChange={e => setName(e.target.value)}\r\n    />\r\n\r\n    <button type=\"button\"\r\n    onClick = {addNode()}>Add Node</button>\r\n</div>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MyFlow;"]},"metadata":{},"sourceType":"module"}